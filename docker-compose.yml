version: "3.8"

services:
  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - data_pipeline
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/ready || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 12
  # MinIO Client for bucket initialization (waits until MinIO is healthy)
  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./source:/source
    entrypoint: |
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      mc mb myminio/landing --ignore-existing;
      mc mb myminio/bronze  --ignore-existing;
      mc mb myminio/silver  --ignore-existing;
      mc mb myminio/gold    --ignore-existing;
      echo 'MinIO buckets created successfully';
      
      echo 'Uploading files from local source folder...';
      mc cp /source/* myminio/landing/;
      echo 'Local files uploaded to MinIO landing bucket successfully';
      "
    networks:
      - data_pipeline

  # Airflow (SQLite + SequentialExecutor)
  airflow:
    image: apache/airflow:2.8.0-python3.11
    container_name: airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__FERNET_KEY: 'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - airflow_db:/opt/airflow/airflow.db
    ports:
      - "8080:8080"
    command: >
      bash -c "pip install boto3 minio requests pandas &&
               airflow db init &&
               airflow users create \
                 --username admin \
                 --firstname Admin \
                 --lastname User \
                 --role Admin \
                 --email admin@example.com \
                 --password admin || true &&
               airflow webserver --port 8080 & 
               airflow scheduler"
    networks:
      - data_pipeline
  # Spark Master
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_OPTS=-Dspark.worker.cleanup.enabled=true
    ports:
      - "8082:8080"   # Spark Master UI (changed from 8080 to avoid conflict)
      - "7077:7077"   # Spark Master port
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/data:/opt/bitnami/spark/data
    networks:
      - data_pipeline

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
    ports:
      - "8081:8081"   # Spark Worker UI
    depends_on:
      - spark-master
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/data:/opt/bitnami/spark/data
    networks:
      - data_pipeline

volumes:
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./minio-data
  airflow_db:

networks:
  data_pipeline:
    driver: bridge
